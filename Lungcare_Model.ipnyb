import numpy as np
import matplotlib.pylab as plt

import tensorflow as tf
import tensorflow_hub as hub 

from tensorflow.keras.applications.vgg16 import VGG16
from google.colab import drive
drive.mount('/content/gdrive')

Mount for Drive Owner
import pathlib
data_train = pathlib.Path('/content/gdrive/My Drive/Colab Notebooks/Capstone/train') 
data_test = pathlib.Path('/content/gdrive/My Drive/Colab Notebooks/Capstone/test') 

Mount for Non Owner
import pathlib
data_train = pathlib.Path('/content/gdrive/My Drive/Capstone/train') 
data_test = pathlib.Path('/content/gdrive/My Drive/Capstone/test') 

#Preprocessing Data
from keras.preprocessing.image import ImageDataGenerator
train_datagen = ImageDataGenerator(
        rescale=1./255,
        shear_range=0.2,
        zoom_range=0.2,
        horizontal_flip=True)
test_datagen = ImageDataGenerator(rescale=1./255)


train_generator = train_datagen.flow_from_directory(
	data_train,
	target_size=(150,150),
	class_mode='categorical',
  batch_size=126
)

test_generator = test_datagen.flow_from_directory(
	data_test,
	target_size=(150,150),
	class_mode='categorical',
  batch_size=126
)



base_model = VGG16(input_shape = (150, 150, 3), 
                          include_top = False, 
                          weights = 'imagenet')


for layer in base_model.layers:
  layer.trainable = False
from tensorflow.keras import Model
from tensorflow.keras import layers
x = layers.Flatten()(base_model.output)
x = layers.Dense(128, activation ='relu')(x)
x = layers.Dense (3, activation = 'softmax')(x)

model = Model (base_model.input, x)
model.compile(optimizer = 'adam',
              loss = 'categorical_crossentropy',
              metrics = ['accuracy'])
history = model.fit(
    train_generator,
    epochs = 10,
    validation_data = test_generator,
    verbose = 1,
    validation_steps=3
) 
import matplotlib.pyplot as plt

# Plot the results
acc = history.history['accuracy']

loss = history.history['loss']


epochs = range(len(acc))

plt.plot(epochs, acc, 'r', label='Training accuracy')
plt.title('Training and validation accuracy')
plt.legend(loc=0)
plt.figure()

plt.show()

LUNGCARE_TEMP_MODEL = "exp_saved_model"
tf.saved_model.save(model, LUNGCARE_TEMP_MODEL)
converter = tf.lite.TFLiteConverter.from_saved_model(LUNGCARE_TEMP_MODEL)
tflite_model = converter.convert()
tflite_model_file= 'converted_model.tflite'
